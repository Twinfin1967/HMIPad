{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red92\green38\blue153;\red46\green13\blue110;
\red38\green71\blue75;\red0\green116\blue0;\red196\green26\blue22;\red100\green56\blue32;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Inconsistent firstResponder status when using inputAccessoryViews\
\
\
\
--\
\
When using inputAccessoryViews with UITextViews there are several cases where inconsistencies are created.\
\
--\
\
Hello,\
\
I would like to bring you the attention to Bug Report id 14502345 with the same title. \
\
Please look at bug report 14502345 "Inconsistent firstResponder status when using inputAccessoryViews"\
\
I reported this as early as iOS7 beta 3 but since then I received a single reply from Apple stating that this was intended behavior but still asking what I wanted to do.\
\
I understand the intended new behavior but I think this is still behaving inconsistently and in a buggy manner that can not be dealt with.\
\
On iOS6 if you have a textView on an input accessory view you can make it become or resign its first responder status and this is independent of the responder status of other textViews on the application window. This allows to present several textViews on a controller and when the user taps on one of them you can transfer first responder to a textView on the inputAccessory view. You can then resign first responder of the textView in the inputAccessoryView -programatically or by hiding the keyboard- and the keyboard dismisses. This behavior allows full control of what textView you want to be the firstResponder at any time.\
\
On iOS7 upon resigning the textView on the inputAccessoryView another -apparently arbitrary- textView on the application window  automatically becomes first responder. This is undesired because there is no way to dismiss the keyboard at this point or even to know which textView will be receiving firstResponder -so you could prevent it if needed-. This erratic behavior is complicated by the fact that superfluous calls to textViewDidBeginEditing happen on textViews that are not intervening on user actions, which is clearly buggy.\
\
I strongly believe that iOS6 behavior was far more consistent and gave more control to developers about what to keep or not as firstResponders.\
\
I would appreciate that you looked at this issue and provide me a workaround. Essentially what I need is a way to dismiss the keyboard both when the user dismisses it and programmatically for textViews that are on the inputAccessoryView in the context of the code example provided with the referenced bug report.\
\
Thank you very much for your attention to this matter \
\
--\
\
Please look at bug report 14502345 "Inconsistent firstResponder status when using inputAccessoryViews"\
\
--\
\
HMI Draw\
\
--\
\
604708439\
\
\
\
\pard\pardeftab720
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 ============================================================================================\
\
--\
\
In app purchase - Failed transaction.\
\
--\
\
Hello,\
\
I am increasingly being reported of users that can not perform an in-app purchase from within the HMI Draw app. We are using the standard code as described in the docs and the app works like a charm on the sandbox environment. \
\
However, for some reason in-app purchases fail for users with "failedTransaction". All my products are "consumable"\
\
I would appreciate that you look at whether there is something wrong on my in-app products or otherwise what I need to do to deal with it.\
\
This is the code I am using:\
\
\pard\tx528\pardeftab528\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )paymentQueue:(\cf3 SKPaymentQueue\cf0  *)queue updatedTransactions:(\cf3 NSArray\cf0  *)transactions\
\{\
    \cf2 for\cf0  (\cf3 SKPaymentTransaction\cf0  *transaction \cf2 in\cf0  transactions)\
    \{\
        \cf3 SKPaymentTransactionState\cf0  state = transaction.\cf3 transactionState\cf0 ;\
        \cf2 switch\cf0  (state)\
        \{\
            \cf2 case\cf0  \cf4 SKPaymentTransactionStatePurchased\cf0 :\
                [\cf2 self\cf0  \cf5 _completeTransaction\cf0 :transaction];\
                \cf2 break\cf0 ;\
                \
            \cf2 case\cf0  \cf4 SKPaymentTransactionStateRestored\cf0 :\
                [\cf2 self\cf0  \cf5 _restoreTransaction\cf0 :transaction];\
                \cf2 break\cf0 ;\
                \
            \cf2 case\cf0  \cf4 SKPaymentTransactionStateFailed\cf0 :\
                [\cf2 self\cf0  \cf5 _failedTransaction\cf0 :transaction];\
                \cf2 break\cf0 ;\
\
            \cf2 case\cf0  \cf4 SKPaymentTransactionStatePurchasing\cf0 :\
                \cf2 break\cf0 ;\
        \}\
        \
        \cf2 if\cf0  ( state != \cf4 SKPaymentTransactionStatePurchasing\cf0  )\
        \{\
            \cf6 // Remove the transaction from the payment queue.\cf0 \
            [queue \cf4 finishTransaction\cf0 :transaction];\
        \
            \cf2 BOOL\cf0  success = (state!=\cf4 SKPaymentTransactionStateFailed\cf0  && transaction.\cf3 error\cf0 .\cf4 code\cf0  != \cf4 SKErrorPaymentCancelled\cf0 );\
            [\cf2 self\cf0  \cf5 _notifyFinishTransaction\cf0 :success];\
        \}\
    \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 \
\
On the failed transaction method I have this:\
\
\pard\tx528\pardeftab528\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 - (\cf2 void\cf0 )_failedTransaction: (\cf3 SKPaymentTransaction\cf0  *)transaction\
\{\
    \cf3 NSError\cf0  *error = transaction.\cf3 error\cf0 ;\
    \cf4 NSLog\cf0 ( \cf7 @"Transaction Error: %@"\cf0 , error );\
    \
    \cf2 if\cf0  (error.\cf4 code\cf0  != \cf4 SKErrorPaymentCancelled\cf0 )\
    \{\
        \cf6 // Optionally, display an error here.\cf0 \
        \cf3 NSString\cf0  *title = \cf8 NSLocalizedString\cf0 (\cf7 @"Transaction Failed"\cf0 , \cf2 nil\cf0 );\
        \cf3 NSString\cf0  *format = \cf8 NSLocalizedString\cf0 (\cf7 @"Transaction failed before being registered to the server.\\nReason: \\"%@\\".\\nNo purchase was made"\cf0 , \cf2 nil\cf0 );\
        \cf3 NSString\cf0  *description = [\cf3 NSString\cf0  \cf4 stringWithFormat\cf0 :format, error.\cf4 localizedDescription\cf0 ];\
        \cf5 _errorWithLocalizedDescription_title\cf0 (description,title);\
    \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 \
The last line just displays an alert view to the user.  I have ready for you some screenshots provided to me by the user. As you will see the reason for failure is "Cannot connect to iTunes Store"\
\
The app works without any problem on a physical iPad using the Sandbox Environment when launched from XCode, and purchases are made without any issue on that scenario.\
\
I would like you to bring your attention into this and give me clues on what could be wrong with the app.\
\
Thanks.\
\
--\
\
--\
\
HMI Draw\
\
--\
\
604708439\
\
\
============================================================================================\
\
\
\
\
}